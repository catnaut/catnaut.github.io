<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python ayncio 异步 I/O</title>
    <url>/2023/10/08/python-asyncio/</url>
    <content><![CDATA[<h2 id="ayncio-中的协程"><a href="#ayncio-中的协程" class="headerlink" title="ayncio 中的协程"></a>ayncio 中的协程</h2><p>理解 <code>asyncio</code> 之前我们要理解 协程</p>
<p>Python 中可以使用 <code>yeild</code> 关键字实现协程，关于协程的概念看看下面这个</p>
<p>(链接待补充)</p>
<blockquote>
<p>重要:<br>在本文档中 “协程” 可用来表示两个紧密关联的概念:</p>
<ul>
<li><em>协程函数</em>: 定义形式为 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-def"><code>async def</code></a> 的函数;</li>
<li><em>协程对象</em>: 调用 <em>协程函数</em> 所返回的对象。<br><em>from python-doc</em></li>
</ul>
</blockquote>
<p>简而言之每个 使用 <code>async def</code> 的异步函数都是 协程</p>
<h2 id="Event-loop"><a href="#Event-loop" class="headerlink" title="Event loop"></a>Event loop</h2><p>与Js 等不同 Python 运行时是没有内置 <code>EventLoop</code> 事件循环的（当初设计好像也没有考虑<br><em>js默认运行IO不阻塞的异步代码, python默认运行IO阻塞的同步代码</em></p>
<blockquote>
<p>vent loop内置与否的影响很大, 来看一个具体的问题, 为什么python要求await一定要在async函数里使用, 而且调用async函数时如果不加await就无法调用, 而且直接调用async函数什么也不会发生, 因为async, await的作用是告诉解释器如何执行代码, async表示这个函数必须在event loop里运行, 而await前后的代码应该分成至少两段不同的任务, 在event loop里按顺序依次运行, 并且一定要前一个任务成功后才执行下一个任务.<br><em>from <a class="link"   href="https://www.zhihu.com/question/451397804/answer/2193074474" >python asyncio的设计晦涩难懂，一点也不python，是做毁了吗？ - 知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p>
</blockquote>
<p>运行一个协程最简单的方式是使用 <code>asyncio.run()</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>) <span class="comment"># 看不懂没关系</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要在 eventloop 中运行协程</span></span><br><span class="line">asyncio.run(main()) <span class="comment"># 用来运行最高层级的入口</span></span><br></pre></td></tr></table></figure></div>

<h2 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><p>使用 <code>await</code> 字段是一种优雅的异步实现方式，<code>await</code> 字段意味着等待 <em>可等待对象</em></p>
<p>可等待对象有三种主要类型: <strong>协程</strong>, <strong>任务</strong> 和 <strong>Future</strong>.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> corr <span class="comment"># 执行 corr ，等到 corr 返回再继续运行</span></span><br><span class="line"><span class="keyword">await</span> ayncio.sleep(<span class="number">5</span>) <span class="comment"># 等待5秒，期间运行其他 “协程”</span></span><br><span class="line"><span class="comment">#（准确的说是再事件循环内的Task）</span></span><br></pre></td></tr></table></figure></div>

<p>可等待对象必须被等待，否则会出现警告</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">ayncio.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>


<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;stdin&gt;:2: RuntimeWarning: coroutine <span class="string">&#x27;sleep&#x27;</span> was never awaited</span><br><span class="line">RuntimeWarning: Enable tracemalloc to get the object allocation traceback</span><br></pre></td></tr></table></figure></div>


<h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p><code>task</code> 是一种 协程的封装，非线程安全<br>可以使用 高层级的 <code>asyncio.create_task()</code> 创建</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">asyncio.create_task(coro, *, name=<span class="literal">None</span>, context=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></div>

<p>创建的任务会自动加入 <code>get_running_loop()</code> 返回的循环中</p>
<ul>
<li>任务可以被取消</li>
<li>可以被并发</li>
<li>可以添加 callback</li>
<li>还有很多其他方法 详情见官方文档 <a class="link"   href="https://docs.python.org/zh-cn/3/library/asyncio-task.html#id17" >Task 对象 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">print_after</span>(<span class="params">what, when</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(when) <span class="comment">#一定要写await，否则不会等待</span></span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">cancel_me</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    建议在写异步函数时，使用 try/finally 语句来确保清理工作一定会被执行。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;cancel_me(): sleep&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        task1 = asyncio.create_task(print_after(<span class="string">&quot;after 10 second&quot;</span>, <span class="number">10</span>))</span><br><span class="line">        task2 = asyncio.sleep(<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.shield(task1) <span class="comment"># 保护 task1 不被取消，就算 cancel_me() 函数被取消了</span></span><br><span class="line">        <span class="keyword">await</span> task2</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cancel_me(): cancel sleep&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 清理工作</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cancel_me(): clean up&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main(): running&#x27;</span>)</span><br><span class="line">    <span class="comment"># Create a &quot;cancel_me&quot; Task</span></span><br><span class="line">    task = asyncio.create_task(cancel_me())</span><br><span class="line">    <span class="comment"># 此时 cancel_me() 函数已经开始加入到 event loop 中，等待执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Wait for 5 second</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main(): sleep&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">5</span>) <span class="comment"># 此时开始执行 task</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这个时候，cancel_me() 函数已经在 event loop 中执行了 5 秒</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main(): call cancel&#x27;</span>)</span><br><span class="line">    task.cancel()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> task</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;main(): cancel_me is cancelled now&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">5</span>) <span class="comment"># 保证 cancel_me() 函数执行完毕</span></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="Task-cancel"><a href="#Task-cancel" class="headerlink" title="Task.cancel"></a>Task.cancel</h3><p>任务可以便捷和安全地取消。 当任务被取消时，<code>asyncio.CancelledError</code> 将在遇到机会时在任务中被引发。</p>
<p>推荐协程使用<code> try/finally</code> 代码块来可靠地执行清理逻辑。 对于 <code>asyncio.CancelledError</code> 被显式捕获的情况，它通常应当在清理完成时被传播。</p>
<p>启用结构化并发的<code>asyncio</code>组件，如 <code>asyncio.TaskGroup</code> 和 <code>asyncio.timeout()</code>，在内部是使用撤销操作来实现的因而在协程屏蔽了 <code>asyncio.CancelledError</code> 时可能无法正常工作。 类似地，用户代码通常也不应调用 <code>uncancel</code>。 但是，在确实想要屏蔽 <code>asyncio.CancelledError</code> 的情况下，则还有必要调用 <code>uncancel()</code> 来完全移除撤销状态。</p>
<p><em>from <a class="link"   href="https://docs.python.org/zh-cn/3/library/asyncio-task.html#id6" >任务取消 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p>
<h3 id="TaskGroup"><a href="#TaskGroup" class="headerlink" title="TaskGroup"></a>TaskGroup</h3><p>使用上下文管理器 <code>async with</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> asyncio.TaskGroup() <span class="keyword">as</span> group:</span><br><span class="line">        group.create_task(print_after(<span class="string">&quot;hello&quot;</span>, <span class="number">2</span>))</span><br><span class="line">        group.create_task(print_after(<span class="string">&quot;world&quot;</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 上下文管理器退出时，等待是隐式的</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h3><p>在 <code>asyncio</code> 中 无法实现像  JS Promise 一样的链式调用，只能一个一个添加</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 只有 task 和 future 可以添加回调函数 协程不行</span></span><br><span class="line">    task = asyncio.create_task(asyncio.sleep(<span class="number">1</span>))</span><br><span class="line">    task.add_done_callback(<span class="keyword">lambda</span> t: <span class="built_in">print</span>(<span class="string">&quot;Task: done&quot;</span>)) <span class="comment"># 返回None无法链式调用</span></span><br><span class="line">    <span class="keyword">await</span> task</span><br></pre></td></tr></table></figure></div>


<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>两种方式实现并发</p>
<ul>
<li>使用 <code>Task</code> <code>TaskGroup</code></li>
<li>使用 <code>asyncio.gather()</code></li>
</ul>
<h3 id="使用-Task-TaskGroup-并发"><a href="#使用-Task-TaskGroup-并发" class="headerlink" title="使用 Task TaskGroup 并发"></a>使用 <code>Task</code> <code>TaskGroup</code> 并发</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">print_after</span>(<span class="params">what, when</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(when) <span class="comment">#一定要写await，否则不会等待</span></span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;await method&quot;</span>) <span class="comment"># 无法并发执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> print_after(<span class="string">&quot;hello&quot;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">await</span> print_after(<span class="string">&quot;world&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>) <span class="comment"># 空行</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;create_task() method&quot;</span>) <span class="comment"># 并发执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    task1 = asyncio.create_task(print_after(<span class="string">&quot;hello&quot;</span>, <span class="number">2</span>))</span><br><span class="line">    task2 = asyncio.create_task(print_after(<span class="string">&quot;world&quot;</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>) <span class="comment"># 空行</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;TaskGroup method&quot;</span>) <span class="comment"># 3.11 新版功能 使用上下文管理器</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> asyncio.TaskGroup() <span class="keyword">as</span> group:</span><br><span class="line">        group.create_task(print_after(<span class="string">&quot;hello&quot;</span>, <span class="number">2</span>))</span><br><span class="line">        group.create_task(print_after(<span class="string">&quot;world&quot;</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 上下文管理器退出时，等待是隐式的</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></div>

<h3 id="使用-asyncio-gather-并发"><a href="#使用-asyncio-gather-并发" class="headerlink" title="使用 asyncio.gather() 并发"></a>使用 <code>asyncio.gather()</code> 并发</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">awaitable asyncio.gather(*aws, return_exceptions=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div>

<p>如果 <code>aws</code> 中的某个可等待对象为协程，它将自动被作为一个任务调度。如果所有可等待对象都成功完成，结果将是一个由所有返回值聚合而成的列表。结果值的顺序与 <code>aws</code> 中可等待对象的顺序一致。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;gather method&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(print_after(<span class="string">&quot;hello&quot;</span>, <span class="number">2</span>), print_after(<span class="string">&quot;world&quot;</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>暂时不是很清楚这个是什么东西，是 <code>Task</code> 的父类，基本上用不上</p>
<h2 id="屏蔽取消"><a href="#屏蔽取消" class="headerlink" title="屏蔽取消"></a>屏蔽取消</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">awaitable asyncio.shield(aw)</span><br></pre></td></tr></table></figure></div>

<p>保护一个 可等待对象 防止其被 取消。(如果 aw 是一个协程，它将自动被作为任务调度。)</p>
<h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">asyncio.timeout(delay)</span><br></pre></td></tr></table></figure></div>

<p>返回一个可被用于限制等待某个操作所耗费时间的 异步上下文管理器。超时返回 <code>TimeoutError</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> asyncio.timeout(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">await</span> long_running_task()</span><br><span class="line">    <span class="keyword">except</span> TimeoutError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The long operation timed out, but we&#x27;ve handled it.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This statement will run regardless.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>可以使用 <code>reschedule()</code> 重新安排超时</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">coroutine asyncio.wait_for(aw, timeout)</span><br></pre></td></tr></table></figure></div>

<p><em>more  <a class="link"   href="https://docs.python.org/zh-cn/3/library/asyncio-task.html#id12" >超时 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p>
<h2 id="事件循环-低级API"><a href="#事件循环-低级API" class="headerlink" title="事件循环 低级API"></a>事件循环 低级API</h2><p>如果是主线程，当调用 <code>asyncio.get_event_loop()</code> 时创建一个事件循环。<br>如果是其它线程，当调用 <code>asyncio.get_event_loop()</code> 时返回运行时错误。<br><code>asyncio.get_event_loop()</code> 返回绑定线程的事件循环，而非当前运行的事件循环。</p>
<h2 id="多线程与协程"><a href="#多线程与协程" class="headerlink" title="多线程与协程"></a>多线程与协程</h2><p>在实际场景中，异步需要和多线程一起使用，因为异步也是单线程的，当在运行一些 CPU 密集的场景时候，会导致阻塞，导致 GUI 或其他无响应.</p>
<h3 id="在协程中创建线程执行任务"><a href="#在协程中创建线程执行任务" class="headerlink" title="在协程中创建线程执行任务"></a>在协程中创建线程执行任务</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">coroutine asyncio.to_thread(func, /, *args, **kwargs)</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>sleep</code> 模拟<code>CPU</code>阻塞</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, strftime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block</span>(<span class="params">time</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;block <span class="subst">&#123;time&#125;</span> second&quot;</span>)</span><br><span class="line">    sleep(time)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;block <span class="subst">&#123;time&#125;</span> second end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">print_after</span>(<span class="params">what, when</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(when)</span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main(): started default method at <span class="subst">&#123;strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> asyncio.TaskGroup() <span class="keyword">as</span> group:</span><br><span class="line">        block(<span class="number">2</span>)</span><br><span class="line">        group.create_task(print_after(<span class="string">&quot;hello&quot;</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main(): end at <span class="subst">&#123;strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main(): started asyncio.to_thread method at <span class="subst">&#123;strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> asyncio.TaskGroup() <span class="keyword">as</span> group:</span><br><span class="line">        group.create_task(asyncio.to_thread(block, <span class="number">2</span>)) <span class="comment"># 别忘记await 这里使用上下文管理器 省略了</span></span><br><span class="line">        group.create_task(print_after(<span class="string">&quot;hello&quot;</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main(): end at <span class="subst">&#123;strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></div>

<h3 id="在新的线程创建事件循环"><a href="#在新的线程创建事件循环" class="headerlink" title="在新的线程创建事件循环"></a>在新的线程创建事件循环</h3><p>创建新的事件循环，定义一个参数为事件循环，在线程内部启动事件循环的函数，创建 <code>Thread</code> ,启动线程</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_loop</span>(<span class="params">loop</span>):</span><br><span class="line">    asyncio.set_event_loop(loop)</span><br><span class="line">    loop.run_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建新的线程并且在新的线程中启动事件循环</span></span><br><span class="line">    loop_1 = asyncio.new_event_loop()</span><br><span class="line">    thread_1 = threading.Thread(target=start_loop,args=(loop_1,),daemon=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># daemon=True 表示设置为守护线程，当主线程结束后，子线程也结束，保证无限事件循环能够正常退出</span></span><br><span class="line">    thread_1.start() <span class="comment"># 别忘记启动线程</span></span><br></pre></td></tr></table></figure></div>

<h3 id="调度在别的线程的事件循环"><a href="#调度在别的线程的事件循环" class="headerlink" title="调度在别的线程的事件循环"></a>调度在别的线程的事件循环</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">asyncio.run_coroutine_threadsafe(coro, loop)</span><br></pre></td></tr></table></figure></div>

<p>向指定事件循环提交一个协程。（线程安全），需要显示传入 <code>loop</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, strftime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block</span>(<span class="params">time</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;block <span class="subst">&#123;time&#125;</span> second&quot;</span>)</span><br><span class="line">    sleep(time)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;block <span class="subst">&#123;time&#125;</span> second end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">print_after</span>(<span class="params">what, when</span>): </span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(when)</span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_loop</span>(<span class="params">loop</span>):</span><br><span class="line">    asyncio.set_event_loop(loop)</span><br><span class="line">    loop.run_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main(): started  at <span class="subst">&#123;strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建新的线程并且在新的线程中启动事件循环</span></span><br><span class="line">    loop_1 = asyncio.new_event_loop()</span><br><span class="line">    thread_1 = threading.Thread(target=start_loop,args=(loop_1,),daemon=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># daemon=True 表示设置为守护线程，当主线程结束后，子线程也结束，保证无限事件循环能够正常退出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main(): started thread at <span class="subst">&#123;strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    thread_1.start()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调度在别的线程的事件循环</span></span><br><span class="line">    asyncio.run_coroutine_threadsafe(print_after(<span class="string">&quot;hello&quot;</span>, <span class="number">1</span>),loop_1)</span><br><span class="line">    asyncio.run_coroutine_threadsafe(print_after(<span class="string">&quot;world&quot;</span>, <span class="number">2</span>),loop_1)</span><br><span class="line">    block(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main(): end at <span class="subst">&#123;strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></div>

<h2 id="asyncio-更多使用方式"><a href="#asyncio-更多使用方式" class="headerlink" title="asyncio 更多使用方式"></a>asyncio 更多使用方式</h2><ul>
<li>执行 <a class="link"   href="https://docs.python.org/zh-cn/3/library/asyncio-stream.html#asyncio-streams" >网络 IO 和 IPC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>;</li>
<li>控制 <a class="link"   href="https://docs.python.org/zh-cn/3/library/asyncio-subprocess.html#asyncio-subprocess" >子进程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>;</li>
<li>通过 <a class="link"   href="https://docs.python.org/zh-cn/3/library/asyncio-queue.html#asyncio-queues" >队列 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 实现分布式任务;</li>
<li><a class="link"   href="https://docs.python.org/zh-cn/3/library/asyncio-sync.html#asyncio-sync" >同步 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 并发代码;</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a class="link"   href="https://myapollo.com.tw/blog/begin-to-asyncio/" >Python asyncio 從不會到上路 - MyApollo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://docs.python.org/zh-cn/3/library/asyncio.html" >asyncio — 异步 I&#x2F;O — Python 3.12.0 文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.kancloud.cn/xiaoa/python-notes/1199062#asyncioFuture_451" >高级篇（2）：并发编程之协程asyncio · 我的python小册 · 看云 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://benpaodewoniu.github.io/2022/09/08/python163/" >python | 异步、多线程相互纠缠 | 犀牛的博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
